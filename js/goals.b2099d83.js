(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["goals"],{"0dff":function(e,n,t){"use strict";t.r(n);var a=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"container",attrs:{id:"goals"}},[t("div",{staticClass:"row",attrs:{id:"editor"}},[t("h6",[e._v("MARKDOW")]),t("div",{staticClass:"col-md-6"},[t("textarea",{domProps:{value:e.input},on:{input:e.update}})]),t("div",{staticClass:"col-md-6"},[t("div",{domProps:{innerHTML:e._s(e.compiledMarkdown)}})])])])},r=[],i=t("a6f4"),s=Object(i["a"])({name:"Goals",data:function(){return{input:"\n---\n\nRéaliser une interface basée sur l’API Rick And Morty\n\nStack technique: _VUEJS (2)_, _TYPESCRIPT_, _VUE ROUTER_ , _VUEX_, _SCSS_.\n\nAPI utilisée: https://rickandmortyapi.com/documentation\n\n---\n\n#### 1 . Liste des cartes\n\n* route: /characters\n\n\t* La barre de recherche doit permettre de filtrer sur le nom de la carte au niveau de la vue (Pas d’appel back au clic sur une carte).\n\t* Mettre en place un loader lors du premier chargement des données\n\t* Mettre en place une pagination.\n\n#### 2 . Détail de la carte\n\n* route: /characters/:id\n\n\t* Afficher les infos sur le personnage.\n\t* Gérer pour une navigation fluide\n\t* Mettre en place un loader lors du premier chargement des données\n\n##### Critères:\n\n- Clarté du code\n- Structuration du code\n- Gestion du data flow\n- Pagination et fluidité\n\t\t\t"}},computed:{compiledMarkdown:function(){return window.marked(this.input,{sanitize:!0})}},methods:{update:function(e){this.input=e.target.value}}}),o=s,d=(t("717f"),t("2877")),u=Object(d["a"])(o,a,r,!1,null,"2dbb625a",null);n["default"]=u.exports},"717f":function(e,n,t){"use strict";t("ba3f")},ba3f:function(e,n,t){}}]);
//# sourceMappingURL=goals.b2099d83.js.map